import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:movie_app/src/core/constants/api_constants.dart';
import 'package:movie_app/src/core/network/download_service.dart';
import 'package:movie_app/src/core/utils/app_colors.dart';
import 'package:movie_app/src/features/popular_people/presentation/pages/show_image/cubit/show_image_cubit.dart';
import 'package:movie_app/src/features/popular_people/presentation/widgets/fading_image_widget.dart';

class ShowImagePage extends StatelessWidget {
  const ShowImagePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: BlocBuilder<ShowImageCubit, ShowImageState>(
        builder: (context, state) {
          switch (state) {
            case ShowImageInitial():
              return FadingImageWidget(
                height: double.infinity,
                width: double.infinity,
                imageUrl:
                    '${ApiConstants.imageBaseUrl}${ApiConstants.imageOriginal}${state.filePath}',
              );
          }
        },
      ),
      floatingActionButton: SimpleDownloadButton(
        imageUrl: context.select<ShowImageCubit, String>((cubit) => cubit.filePath),

      ),

      // FloatingActionButton(
      //   backgroundColor: AppColors.primaryColor,
      //   onPressed: () {},
      //   child: Icon(
      //     Icons.download_outlined,
      //     color: AppColors.whiteColor,
      //     size: 24.sp,
      //   ),
      // ),
    );
  }
}

class SimpleDownloadButton extends StatefulWidget {
  final String imageUrl;
  final String? fileName;

  const SimpleDownloadButton({Key? key, required this.imageUrl, this.fileName})
    : super(key: key);

  @override
  _SimpleDownloadButtonState createState() => _SimpleDownloadButtonState();
}

class _SimpleDownloadButtonState extends State<SimpleDownloadButton> {
  bool _isDownloading = false;

  void _downloadImage() async {
    setState(() {
      _isDownloading = true;
    });

    final taskId = await DownloadService.downloadImageSimple(
      widget.imageUrl,
      widget.fileName,
    );

    setState(() {
      _isDownloading = false;
    });

    if (taskId != null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Download started!')));
    } else {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Download failed!')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: _isDownloading ? null : _downloadImage,
      child: _isDownloading
          ? Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                SizedBox(
                  width: 16,
                  height: 16,
                  child: CircularProgressIndicator(strokeWidth: 2),
                ),
                SizedBox(width: 8),
                Text('Downloading...'),
              ],
            )
          : Text('Download Image'),
    );
  }
}
